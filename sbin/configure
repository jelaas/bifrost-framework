#!/bin/bash

#
# Bifrost configuration utility
# 

export TERM=xterm
export PATH=.:$PATH:/bin:/usr/sbin:/usr/bin:/sbin
BACKTITLE="Bifrost configuration"

READONLY=no
if ! test -w /; then
    dialog --no-lines --backtitle "$BACKTITLE" --title Password --msgbox "The root filesystems is mounted read-only. No changes can be made to configuration!" 0 0
    READONLY=yes
fi

#
# Root password
#

if [ "$1" = password ]; then
    ETC=${ETC:-/etc}

    dialog --no-lines --backtitle "$BACKTITLE" --title Password --msgbox "You are STRONGLY encouraged to change the default passwords (hades12) for the user: root. If you already have done so, you may skip this step." 0 0

    dialog --no-lines --backtitle "$BACKTITLE" --title Password --yesno "Do you want to set the root password?" 0 0
    if [ $? = 0 ]; then
	clear
	if passwd root; then
	    if [ ! -f $ETC/.configured ]; then
		touch $ETC/.configured
	    fi
	fi
    fi
    
    exit 0
fi

#
# Hostname
#

if [ "$1" = hostname ]; then

    ETC=${ETC:-/etc}
    
    read hostname < $ETC/HOSTNAME

    rc=$(dialog --no-lines --backtitle "$BACKTITLE" --stdout --title Hostname --inputbox "The hostname must be set to the full DNS name. Ex: computer.domain.se. Enter hostname" 0 0 "$hostname") 
    [ $? = 0 ] || exit 0
    echo $rc > $ETC/HOSTNAME

    read V < $ETC/.version

    cat <<EOF > $ETC/motd

    Bifrost Network Project
    version: $V
       $rc

EOF

    exit 0
fi

#
# DNS
#

function dnsserver {
    rc=$(dialog --no-lines --backtitle "$BACKTITLE" --stdout --inputbox "Enter dnsserver IP" 0 0 "$1") 
    [ $? = 0 ] || return 1
    echo $rc
    return 0
}

function idomain {
    rc=$(dialog --no-lines --backtitle "$BACKTITLE" --stdout --inputbox "Enter DNS domain" 0 0 "$1") 
    [ $? = 0 ] || return 1
    echo $rc
    return 0
}

if [ "$1" = dns ]; then
    ETC=${ETC:-/etc}
 
    DOMAIN="none"
    s[0]="none"
    s[1]="none"
    s[2]="none"
    i=0
    exec 3<$ETC/resolv.conf
    while read -u 3 L; do
	if echo $L|grep -qs "^nameserver" ; then
	    s[$i]=$(echo $L|cut -d ' ' -f 2)
	    i=$[ i+1 ]
	fi
	if echo $L|grep -qs "^domain" ; then
	    DOMAIN="$(echo $L|cut -d ' ' -f 2)"
	fi
    done
    while true; do
	rc=$(dialog --no-lines --backtitle "$BACKTITLE" --stdout --title "Configure DNS" --ok-label Select --cancel-label Back --menu  "Choose" 0 0 0 Domain $DOMAIN Server1 "${s[0]}" Server2 "${s[1]}" Server3 "${s[2]}" Save "")
	if [ $? != 0 ]; then
	    exit 0
	fi

	case $rc in
	    'Save')
	    grep -v "^nameserver" $ETC/resolv.conf > /tmp/dnsconf.$$
	    if [ -f /tmp/dnsconf.$$ ] ; then
	        cat /tmp/dnsconf.$$ > $ETC/resolv.conf
		[ "$DOMAIN" = none ] || (echo "domain $DOMAIN" >> $ETC/resolv.conf)
		[ "${s[0]}" = none ] || (echo "nameserver ${s[0]}" >> $ETC/resolv.conf)
		[ "${s[1]}" = none ] || (echo "nameserver ${s[1]}" >> $ETC/resolv.conf)
		[ "${s[2]}" = none ] || (echo "nameserver ${s[2]}" >> $ETC/resolv.conf)
		rm -f /tmp/dnsconf.$$
	    fi
	    ;;
	    Domain)
	    rc=$(idomain "$DOMAIN")
	    [ $? = 0 ] && DOMAIN=$rc
	    ;;
	    Server1)
	    rc=$(dnsserver "${s[0]}")
	    [ $? = 0 ] && s[0]=$rc
	    ;;
	    Server2)
	    rc=$(dnsserver "${s[1]}")
	    [ $? = 0 ] && s[1]=$rc
	    ;;
	    Server3)
	    rc=$(dnsserver "${s[2]}")
	    [ $? = 0 ] && s[2]=$rc
	    ;;
	    esac
    done

    exit 0
fi

#
# Interfaces
#

function getipaddr {
    rc=$(dialog --no-lines --backtitle "$BACKTITLE" --stdout --inputbox "$1" 0 0 "$2") 
    [ $? = 0 ] || return 1
    echo $rc
    return 0
}

function confniclist {
    for f in $ETC/config.flags/*.nic; do
	[ ! -f "$f" ] && continue
	f=${f##*/}
	echo ${f/.nic/}
    done
}

function ifsecondary {
    local item
    
    ifname=$1
    IP4ADDR=""
    IP4MASK=""
    IP6ADDR=""
    IP6MASK=""
    BROADCAST="255.255.255.255"
    IP4ADDR2=""
    IP4MASK2=""
    IP6ADDR2=""
    IP6MASK2=""
    BROADCAST2="255.255.255.255"
    IP4ADDR3=""
    IP4MASK3=""
    IP6ADDR3=""
    IP6MASK3=""
    BROADCAST3="255.255.255.255"
    IP4ADDR4=""
    IP4MASK4=""
    IP6ADDR4=""
    IP6MASK4=""
    BROADCAST4="255.255.255.255"
    IP4ADDR5=""
    IP4MASK5=""
    IP6ADDR5=""
    IP6MASK5=""
    BROADCAST5="255.255.255.255"

    [ -f $ETC/config.data/${ifname}.nic ] && . $ETC/config.data/${ifname}.nic
    [ "$DHCP_CLIENT" = yes ] || DHCP_CLIENT=no
    
    [ "$CONFIG_NO_SPOOF" ] || CONFIG_NO_SPOOF=yes
    [ "$CONFIG_NO_SOURCE" ] || CONFIG_NO_SOURCE=yes
    [ "$CONFIG_PROXY_ARP" ] || CONFIG_PROXY_ARP=no
    [ "$CONFIG_REDIRECT" ] || CONFIG_REDIRECT=yes
    [ "$CONFIG_ACCEPT_REDIRECT" ] || CONFIG_ACCEPT_REDIRECT=no
    [ "$CONFIG_LOG_MARTIANS" ] || CONFIG_LOG_MARTIANS=yes
    
    while true; do
	rc=$(dialog --no-lines --stdout --backtitle "$BACKTITLE" --title "Secondary addresses $ifname" --ok-label Select --cancel-label Cancel --default-item "$item" --menu  "Choose" 0 0 0\
 IP4ADDR2 "$IP4ADDR2" IP4PREFIX2 "$IP4MASK2" BROADCAST2 "$BROADCAST2" \
 IP4ADDR3 "$IP4ADDR3" IP4PREFIX3 "$IP4MASK3" BROADCAST3 "$BROADCAST3" \
 IP4ADDR4 "$IP4ADDR4" IP4PREFIX4 "$IP4MASK4" BROADCAST4 "$BROADCAST4" \
 IP4ADDR5 "$IP4ADDR5" IP4PREFIX5 "$IP4MASK5" BROADCAST5 "$BROADCAST5" \
 Save  "")
	[ $? = 0 ] || return 0
	item="$rc"

	len=${#rc}
        len=$[ len - 1 ]
        n=${rc:~0}
        rc=${rc:0:len}

	[ "$n" = 2 ] && ip=$IP4ADDR2 && mask=$IP4MASK2 && bcast=$BROADCAST2
	[ "$n" = 3 ] && ip=$IP4ADDR3 && mask=$IP4MASK3 && bcast=$BROADCAST3
	[ "$n" = 4 ] && ip=$IP4ADDR4 && mask=$IP4MASK4 && bcast=$BROADCAST4
	[ "$n" = 5 ] && ip=$IP4ADDR5 && mask=$IP4MASK5 && bcast=$BROADCAST5

	if [ "$rc" = IP4ADDR ]; then
	    rc=$(getipaddr "Enter IPv4 address" "$ip")
	    if [ $? = 0 ]; then
		if [[ $rc =~ / ]]; then
		    ip=${rc%%/*}
		    mask=${rc##*/}
		    [ "$n" = 2 ] && IP4ADDR2=$ip && IP4MASK2=$mask
		    [ "$n" = 3 ] && IP4ADDR3=$ip && IP4MASK3=$mask
		    [ "$n" = 4 ] && IP4ADDR4=$ip && IP4MASK4=$mask
		    [ "$n" = 5 ] && IP4ADDR5=$ip && IP4MASK5=$mask
		else
		    [ "$n" = 2 ] && IP4ADDR2="$rc"
		    [ "$n" = 3 ] && IP4ADDR3="$rc"
		    [ "$n" = 4 ] && IP4ADDR4="$rc"
		    [ "$n" = 5 ] && IP4ADDR5="$rc"
		fi
	    fi
	    continue
	fi
	if [ "$rc" = IP4PREFIX ]; then
	    rc=$(getipaddr "Enter IPv4 prefix length" "$mask")
	    if [ $? = 0 ]; then
		[ "$n" = 2 ] && IP4MASK2="$rc"
		[ "$n" = 3 ] && IP4MASK3="$rc"
		[ "$n" = 4 ] && IP4MASK4="$rc"
		[ "$n" = 5 ] && IP4MASK5="$rc"
	    fi
	    continue
	fi
	if [ "$rc" = BROADCAST ]; then
	    rc=$(getipaddr "Enter IPv4 broadcast address" "$bcast")
	    if [ $? = 0 ]; then
		[ "$n" = 2 ] && BROADCAST2="$rc"
		[ "$n" = 3 ] && BROADCAST3="$rc"
		[ "$n" = 4 ] && BROADCAST4="$rc"
		[ "$n" = 5 ] && BROADCAST5="$rc"
	    fi
	    continue
	fi
	if [ "$rc" = Sav ]; then
	    touch $ETC/config.data/${ifname}.nic
	    if ! test -w $ETC/config.data/${ifname}.nic; then
		dialog --no-lines --backtitle "$BACKTITLE" --title Attention --msgbox "The configuration file is not writable!" 0 0
		continue
	    fi
	    cat > $ETC/config.data/${ifname}.nic <<EOF
export DHCP_CLIENT=$DHCP_CLIENT
export IP4ADDR=$IP4ADDR
export IP4MASK=$IP4MASK
export IP6ADDR=$IP6ADDR
export IP6MASK=$IP6MASK
export BROADCAST=$BROADCAST
export IP4ADDR2=$IP4ADDR2
export IP4MASK2=$IP4MASK2
export IP6ADDR2=$IP6ADDR2
export IP6MASK2=$IP6MASK2
export BROADCAST2=$BROADCAST2
export IP4ADDR3=$IP4ADDR3
export IP4MASK3=$IP4MASK3
export IP6ADDR3=$IP6ADDR3
export IP6MASK3=$IP6MASK3
export BROADCAST3=$BROADCAST3
export IP4ADDR4=$IP4ADDR4
export IP4MASK4=$IP4MASK4
export IP6ADDR4=$IP6ADDR4
export IP6MASK4=$IP6MASK4
export BROADCAST4=$BROADCAST4
export IP4ADDR5=$IP4ADDR5
export IP4MASK5=$IP4MASK5
export IP6ADDR5=$IP6ADDR5
export IP6MASK5=$IP6MASK5
export BROADCAST5=$BROADCAST5
export CONFIG_NO_SPOOF=$CONFIG_NO_SPOOF
export CONFIG_NO_SOURCE=$CONFIG_NO_SOURCE
export CONFIG_PROXY_ARP=$CONFIG_PROXY_ARP
export CONFIG_REDIRECT=$CONFIG_REDIRECT
export CONFIG_ACCEPT_REDIRECT=$CONFIG_ACCEPT_REDIRECT
export CONFIG_LOG_MARTIANS=$CONFIG_LOG_MARTIANS
export DESCRIPTION="$DESCRIPTION"
EOF
	    dialog --no-lines --backtitle "$BACKTITLE" --title Attention --msgbox "Configuration for ${ifname} saved" 0 0
	fi	
    done
}

function ifphys {
    ifname=$1

    IP4ADDR=""
    IP4MASK=""
    IP6ADDR=""
    IP6MASK=""
    BROADCAST="255.255.255.255"
    IP4ADDR2=""
    IP4MASK2=""
    IP6ADDR2=""
    IP6MASK2=""
    BROADCAST2="255.255.255.255"
    IP4ADDR3=""
    IP4MASK3=""
    IP6ADDR3=""
    IP6MASK3=""
    BROADCAST3="255.255.255.255"
    IP4ADDR4=""
    IP4MASK4=""
    IP6ADDR4=""
    IP6MASK4=""
    BROADCAST4="255.255.255.255"
    IP4ADDR5=""
    IP4MASK5=""
    IP6ADDR5=""
    IP6MASK5=""
    BROADCAST5="255.255.255.255"
    [ -f $ETC/config.data/${ifname}.nic ] && . $ETC/config.data/${ifname}.nic
    [ "$DHCP_CLIENT" = yes ] || DHCP_CLIENT=no
    
    [ "$CONFIG_NO_SPOOF" ] || CONFIG_NO_SPOOF=yes
    [ "$CONFIG_NO_SOURCE" ] || CONFIG_NO_SOURCE=yes
    [ "$CONFIG_PROXY_ARP" ] || CONFIG_PROXY_ARP=no
    [ "$CONFIG_REDIRECT" ] || CONFIG_REDIRECT=yes
    [ "$CONFIG_ACCEPT_REDIRECT" ] || CONFIG_ACCEPT_REDIRECT=no
    [ "$CONFIG_LOG_MARTIANS" ] || CONFIG_LOG_MARTIANS=yes

    while true; do
	rc=$(dialog --no-lines --stdout --backtitle "$BACKTITLE" --title "Configure $ifname" --ok-label Select --cancel-label Cancel --default-item "$item" --menu  "Choose" 0 0 0 DHCP "$DHCP_CLIENT" IP4ADDR "$IP4ADDR" IP4PREFIX "$IP4MASK" BROADCAST "$BROADCAST" IP6ADDR "$IP6ADDR" IP6PREFIX "$IP6MASK" "Secondary addresses" "" no_spoof "$CONFIG_NO_SPOOF" no_source "$CONFIG_NO_SOURCE" proxy_arp "$CONFIG_PROXY_ARP" redirect "$CONFIG_REDIRECT" accept_redirect "$CONFIG_ACCEPT_REDIRECT" log_martians "$CONFIG_LOG_MARTIANS" description "$DESCRIPTION" Save  "")
	[ $? = 0 ] || return 0

	item="$rc"

	if [ "$rc" = DHCP ]; then
	    [ "$DHCP_CLIENT" = no ] && DHCP_CLIENT=yes && continue
	    DHCP_CLIENT=no
	fi
	[ "$rc" = "Secondary addresses" ] && ifsecondary $ifname && continue
	[ "$rc" = no_spoof ] && [ "$CONFIG_NO_SPOOF" = yes ] && CONFIG_NO_SPOOF=no && continue
	[ "$rc" = no_spoof ] && [ "$CONFIG_NO_SPOOF" = no ] && CONFIG_NO_SPOOF=yes && continue
	[ "$rc" = no_source ] && [ "$CONFIG_NO_SOURCE" = yes ] && CONFIG_NO_SOURCE=no && continue
	[ "$rc" = no_source ] && [ "$CONFIG_NO_SOURCE" = no ] && CONFIG_NO_SOURCE=yes && continue
	[ "$rc" = proxy_arp ] && [ "$CONFIG_PROXY_ARP" = yes ] && CONFIG_PROXY_ARP=no && continue
	[ "$rc" = proxy_arp ] && [ "$CONFIG_PROXY_ARP" = no ] && CONFIG_PROXY_ARP=yes && continue
	[ "$rc" = redirect ] && [ "$CONFIG_REDIRECT" = yes ] && CONFIG_REDIRECT=no && continue
	[ "$rc" = redirect ] && [ "$CONFIG_REDIRECT" = no ] && CONFIG_REDIRECT=yes && continue
	[ "$rc" = accept_redirect ] && [ "$CONFIG_ACCEPT_REDIRECT" = yes ] && CONFIG_ACCEPT_REDIRECT=no && continue
	[ "$rc" = accept_redirect ] && [ "$CONFIG_ACCEPT_REDIRECT" = no ] && CONFIG_ACCEPT_REDIRECT=yes && continue
	[ "$rc" = log_martians ] && [ "$CONFIG_LOG_MARTIANS" = yes ] && CONFIG_LOG_MARTIANS=no && continue
	[ "$rc" = log_martians ] && [ "$CONFIG_LOG_MARTIANS" = no ] && CONFIG_LOG_MARTIANS=yes && continue

	if [ "$rc" = IP4ADDR ]; then
	    rc=$(getipaddr "Enter IPv4 address" "$IP4ADDR")
	    if [ $? = 0 ]; then
		if [[ $rc =~ / ]]; then
		    IP4ADDR=${rc%%/*}
		    IP4MASK=${rc##*/}
		else
		    IP4ADDR="$rc"
		fi
	    fi
	fi
	if [ "$rc" = IP4PREFIX ]; then
	    rc=$(getipaddr "Enter IPv4 prefix length" "$IP4MASK")
	    [ $? = 0 ] && IP4MASK="$rc"
	fi
	if [ "$rc" = IP6ADDR ]; then
	    rc=$(getipaddr "Enter IPv6 address" "$IP6ADDR")
	    if [ $? = 0 ]; then
		if [[ $rc =~ / ]]; then
		    IP6ADDR=${rc%%/*}
		    IP6MASK=${rc##*/}
		else
		    IP6ADDR="$rc"
		fi
	    fi
	fi
	if [ "$rc" = IP6PREFIX ]; then
	    rc=$(getipaddr "Enter IPv6 prefix length" "$IP6MASK")
	    [ $? = 0 ] && IP6MASK="$rc"
	fi
	if [ "$rc" = BROADCAST ]; then
	    rc=$(getipaddr "Enter IPv4 broadcast address" "$BROADCAST")
	    [ $? = 0 ] && BROADCAST="$rc"
	fi
	if [ "$rc" = description ]; then
	    rc=$(getipaddr "Enter a short description" "$DESCRIPTION")
	    [ $? = 0 ] && DESCRIPTION="$rc"
	fi

	if [ "$rc" = Save ]; then
	    touch $ETC/config.data/${ifname}.nic
	    if ! test -w $ETC/config.data/${ifname}.nic; then
		dialog --no-lines --backtitle "$BACKTITLE" --title Attention --msgbox "The configuration file is not writable!" 0 0
		continue
	    fi
	    cat > $ETC/config.data/${ifname}.nic <<EOF
export DHCP_CLIENT=$DHCP_CLIENT
export IP4ADDR=$IP4ADDR
export IP4MASK=$IP4MASK
export IP6ADDR=$IP6ADDR
export IP6MASK=$IP6MASK
export BROADCAST=$BROADCAST
export IP4ADDR2=$IP4ADDR2
export IP4MASK2=$IP4MASK2
export IP6ADDR2=$IP6ADDR2
export IP6MASK2=$IP6MASK2
export BROADCAST2=$BROADCAST2
export IP4ADDR3=$IP4ADDR3
export IP4MASK3=$IP4MASK3
export IP6ADDR3=$IP6ADDR3
export IP6MASK3=$IP6MASK3
export BROADCAST3=$BROADCAST3
export IP4ADDR4=$IP4ADDR4
export IP4MASK4=$IP4MASK4
export IP6ADDR4=$IP6ADDR4
export IP6MASK4=$IP6MASK4
export BROADCAST4=$BROADCAST4
export IP4ADDR5=$IP4ADDR5
export IP4MASK5=$IP4MASK5
export IP6ADDR5=$IP6ADDR5
export IP6MASK5=$IP6MASK5
export BROADCAST5=$BROADCAST5
export CONFIG_NO_SPOOF=$CONFIG_NO_SPOOF
export CONFIG_NO_SOURCE=$CONFIG_NO_SOURCE
export CONFIG_PROXY_ARP=$CONFIG_PROXY_ARP
export CONFIG_REDIRECT=$CONFIG_REDIRECT
export CONFIG_ACCEPT_REDIRECT=$CONFIG_ACCEPT_REDIRECT
export CONFIG_LOG_MARTIANS=$CONFIG_LOG_MARTIANS
export DESCRIPTION="$DESCRIPTION"
EOF
            echo "yes" > $ETC/config.flags/${ifname}.nic
	    dialog --no-lines --backtitle "$BACKTITLE" --title Attention --msgbox "Configuration for ${ifname} saved" 0 0
	fi
    done
    exit 0
}

if [ "$1" = if ]; then
    ETC=${ETC:-/etc}
    
    F=/tmp/ifcfg.$$
    while true; do
	nics="$((ifinfo|grep -v lo;confniclist)|sort|uniq)"
	cp /dev/null $F
	for nic in $nics; do
	    echo \"$nic\" \"$(ifinfo -w -s - -i $nic driver)$(ifinfo -w -s Mbit- -i $nic speedmax)$(ifinfo -w -i $nic bus_info)\" >> $F
	done
    
	rc=$(dialog --no-lines --stdout --backtitle "$BACKTITLE" --title "Configure interfaces" --ok-label Select --cancel-label Cancel --menu  "Choose interface" 0 0 0 --file $F)
	
	[ $? = 0 ] || exit 0
	
	ifphys $rc
    done
    exit 0
fi

#
# Gateway
#

if [ "$1" = gateway ]; then
    ETC=${ETC:-/etc}
    
    . $ETC/config.data/inet.routes &> /dev/null
    GATEWAY=$(dialog --no-lines --backtitle "$BACKTITLE" --stdout --title "Default gateway" --inputbox "Enter default gateway" 0 0 "$GATEWAY")
    [ $? = 0 ] || exit 0
    cat > $ETC/config.data/inet.routes <<EOF
export GATEWAY=$GATEWAY
EOF

    exit 0
fi

#
# Services
#

if [ "$1" = services ]; then
    ETC=${ETC:-/etc}

    read cron < $ETC/config.flags/cron || cron=yes
    read dhcpd < $ETC/config.flags/dhcpd || dhcpd=no
    read rtcache < $ETC/config.flags/disable-route-cache || rtcache=yes
    read dnsmasq < $ETC/config.flags/dnsmasq || dnsmasq=no
    read fsck < $ETC/config.flags/fsck || fsck=no
    read fw6rules < $ETC/config.flags/fw6rules || fw6rules=no
    read fwrules < $ETC/config.flags/fwrules || fwrules=no
    read ifrename < $ETC/config.flags/ifrename || ifrename=no
    read ifstat2 < $ETC/config.flags/ifstat2 || ifstat2=yes
    read inetd < $ETC/config.flags/inetd || inetd=no
    read ipmi < $ETC/config.flags/ipmi || ipmi=yes
    read ipv4forward < $ETC/config.flags/ipv4-forward || ipv4forward=yes
    read ipv6forward < $ETC/config.flags/ipv6-forward || ipv6forward=no
    read ntp < $ETC/config.flags/ntp || ntp=no
    read ramlog < $ETC/config.flags/ramlog || ramlog=no
    read rwsystem < $ETC/config.flags/rwsystem || rwsystem=no
    read sshd < $ETC/config.flags/sshd || sshd=yes
    read swedishkeyboard < $ETC/config.flags/swedish-keyboard || swedishkeyboard=yes
    
    [ "$cron" = yes ] && cron=on; [ "$cron" = no ] && cron=off
    [ "$dhcpd" = yes ] && dhcpd=on; [ "$dhcpd" = no ] && dhcpd=off
    [ "$rtcache" = yes ] && rtcache=on; [ "$rtcache" = no ] && rtcache=off
    [ "$dnsmasq" = yes ] && dnsmasq=on; [ "$dnsmasq" = no ] && dnsmasq=off
    [ "$fsck" = yes ] && fsck=on; [ "$fsck" = no ] && fsck=off
    [ "$fw6rules" = yes ] && fw6rules=on; [ "$fw6rules" = no ] && fw6rules=off
    [ "$fwrules" = yes ] && fwrules=on; [ "$fwrules" = no ] && fwrules=off
    [ "$ifrename" = yes ] && ifrename=on; [ "$ifrename" = no ] && ifrename=off
    [ "$ifstat2" = yes ] && ifstat2=on; [ "$ifstat2" = no ] && ifstat2=off
    [ "$inetd" = yes ] && inetd=on; [ "$inetd" = no ] && inetd=off
    [ "$ipmi" = yes ] && ipmi=on; [ "$ipmi" = no ] && ipmi=off
    [ "$ipv4forward" = yes ] && ipv4forward=on; [ "$ipv4forward" = no ] && ipv4forward=off
    [ "$ipv6forward" = yes ] && ipv6forward=on; [ "$ipv6forward" = no ] && ipv6forward=off
    [ "$ntp" = yes ] && ntp=on; [ "$ntp" = no ] && ntp=off
    [ "$ramlog" = yes ] && ramlog=on; [ "$ramlog" = no ] && ramlog=off
    [ "$rwsystem" = yes ] && rwsystem=on; [ "$rwsystem" = no ] && rwsystem=off
    [ "$sshd" = yes ] && sshd=on; [ "$sshd" = no ] && sshd=off
    [ "$swedishkeyboard" = yes ] && swedishkeyboard=on; [ "$swedishkeyboard" = no ] && swedishkeyboard=off
    
    rc=$(dialog --no-lines --backtitle "$BACKTITLE" --stdout --ok-label Apply --separate-output --default-item "$item" --title "Configure services" --checklist "Core services" 0 0 0 cron "Cron daemon" $cron dhcpd "DHCP daemon" $dhcpd rtcache "Disable route cache" $rtcache dnsmasq "Dnsmasq" $dnsmasq fsck "Extra fsck at boot" $fsck fw6rules "IPv6 firewall" $fw6rules fwrules "IPv4 firewall" $fwrules ifrename "Renaming of interfaces" $ifrename ifstat2 "Ifstat2 daemon for network statistics" $ifstat2 inetd "Inetd services" $inetd ipmi "Load ipmi modules for ipmitool" $ipmi ipv4forward "Enable IPv4 forwarding" $ipv4forward ipv6forward "Enable IPv6 forwarding" $ipv6forward ntp "NTP daemon" $ntp ramlog "Persistent ramlog" $ramlog rwsystem "Rootfs writable after boot" $rwsystem sshd "SSH daemon" $sshd swedishkeyboard "Swedish keyboard" $swedishkeyboard)
    [ $? = 0 ] || exit 0
    
    item=$rc
    
    cron=no; [[ "$rc" =~ cron ]] && cron=yes; echo $cron > $ETC/config.flags/cron
    dhcpd=no; [[ "$rc" =~ dhcpd ]] && dhcpd=yes; echo $dhcpd > $ETC/config.flags/dhcpd
    rtcache=no; [[ "$rc" =~ rtcache ]] && rtcache=yes; echo $rtcache > $ETC/config.flags/disable-route-cache
    dnsmasq=no; [[ "$rc" =~ dnsmasq ]] && dnsmasq=yes; echo $dnsmasq > $ETC/config.flags/dnsmasq
    fsck=no; [[ "$rc" =~ fsck ]] && fsck=yes; echo $fsck > $ETC/config.flags/fsck
    fw6rules=no; [[ "$rc" =~ fw6rules ]] && fw6rules=yes; echo $fw6rules > $ETC/config.flags/fw6rules
    fwrules=no; [[ "$rc" =~ fwrules ]] && fwrules=yes; echo $fwrules > $ETC/config.flags/fwrules
    ifrename=no; [[ "$rc" =~ ifrename ]] && ifrename=yes; echo $ifrename > $ETC/config.flags/ifrename
    ifstat2=no; [[ "$rc" =~ ifstat2 ]] && ifstat2=yes; echo $ifstat2 > $ETC/config.flags/ifstat2
    inetd=no; [[ "$rc" =~ inetd ]] && inetd=yes; echo $inetd > $ETC/config.flags/inetd
    ipmi=no; [[ "$rc" =~ ipmi ]] && ipmi=yes; echo $ipmi > $ETC/config.flags/ipmi
    ipv4forward=no; [[ "$rc" =~ ipv4forward ]] && ipv4forward=yes; echo $ipv4forward > $ETC/config.flags/ipv4-forward
    ipv6forward=no; [[ "$rc" =~ ipv6forward ]] && ipv6forward=yes; echo $ipv6forward > $ETC/config.flags/ipv6-forward
    ntp=no; [[ "$rc" =~ ntp ]] && ntp=yes; echo $ntp > $ETC/config.flags/ntp
    ramlog=no; [[ "$rc" =~ ramlog ]] && ramlog=yes; echo $ramlog > $ETC/config.flags/ramlog
    rwsystem=no; [[ "$rc" =~ rwsystem ]] && rwsystem=yes; echo $rwsystem > $ETC/config.flags/rwsystem
    sshd=no; [[ "$rc" =~ sshd ]] && sshd=yes; echo $sshd > $ETC/config.flags/sshd
    swedishkeyboard=no; [[ "$rc" =~ swedishkeyboard ]] && swedishkeyboard=yes; echo $swedishkeyboard > $ETC/config.flags/swedish-keyboard
	
    exit 0
fi

#
# Syslog
#

if [ "$1" = syslog ]; then
    ETC=${ETC:-/etc}

    dialog --no-lines --backtitle "$BACKTITLE" --title "Syslog server" --yesno "Do you want to log to a syslog server?" 0 0
    if [ $? = 0 ]; then
	SS="$(cat $ETC/syslog.conf|tr -s ' '|cut -d ' ' -f 2|cut -d '@' -f 2)"
	SS=$(dialog --no-lines --backtitle "$BACKTITLE" --stdout --title "Syslog server" --inputbox "Enter syslog server" 0 0 "$SS")
	[ $? = 0 ] || exit 0
	cat > $ETC/syslog.conf <<EOF
*.*   -@$SS
EOF
       exit 0
    fi

    cat > $ETC/syslog.conf <<EOF
*.*    console
EOF

    exit 0
fi

if [ "$1" = upgrade ]; then
    ETC=${ETC:-/etc}
    
    bifrost-upgrade

    echo "Press return to continue"
    read
    
    exit 0
fi

if [ "$1" ]; then
    echo "The option \'$1\' is not supported!"
    echo
    exit 1
fi

item="root password"

while true; do
    rc=$(dialog --no-lines --backtitle "$BACKTITLE" --stdout --default-item "$item" --title "Main menu" --ok-label Select --cancel-label Cancel --menu "Choose section" 0 0 0 "Root password" "" "Hostname" "" DNS "" "Network devices" "" Gateway "" Services "" Syslog "" "Bifrost upgrade" "" "Remount rootfs writable" "")

    if [ $? != 0 ] ; then
	[ "$READONLY" = yes ] && remount r
	exit 0
    fi
    
    [ "$rc" = "Root password" ] && item="Hostname" && configure password && continue
    [ "$rc" = "Hostname" ] && item="DNS" && configure hostname  && continue
    [ "$rc" = "DNS" ] && item="Network devices" && configure dns && continue
    [ "$rc" = "Network devices" ] && item="Gateway" && configure if && continue
    [ "$rc" = "Gateway" ] && item="Services" && configure gateway && continue
    [ "$rc" = "Services" ] && item="Syslog" && configure services && continue
    [ "$rc" = "Syslog" ] && item="root password" && configure syslog && continue
    [ "$rc" = "Bifrost upgrade" ] && item="Bifrost upgrade" && configure upgrade && continue

    [ "$rc" = "Remount rootfs writable" ] && remount w && READONLY=yes
    
done
